// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(WebMusicAppContext))]
    partial class WebMusicAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvertiserId")
                        .HasColumnType("int")
                        .HasColumnName("advertiser_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_path");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("link");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Advertis__3213E83F71C63927");

                    b.HasIndex("AdvertiserId");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("Domain.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("artist_id");

                    b.Property<string>("CoverImagePath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cover_image_path");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Albums__3213E83FAEFAFB04");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.Property<int>("TrackId")
                        .HasColumnType("int")
                        .HasColumnName("track_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__Comments__3213E83F6CE91A73");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Models.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ListenerId")
                        .HasColumnType("int")
                        .HasColumnName("listener_id");

                    b.Property<int>("MusicianId")
                        .HasColumnType("int")
                        .HasColumnName("musician_id");

                    b.HasKey("Id")
                        .HasName("PK__Donation__3213E83F1CB31849");

                    b.HasIndex("ListenerId");

                    b.HasIndex("MusicianId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("Domain.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Genres__3213E83F927BA21F");

                    b.HasIndex(new[] { "Name" }, "UQ__Genres__72E12F1B5168EA2F")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Domain.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("TrackId")
                        .HasColumnType("int")
                        .HasColumnName("track_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__Likes__3213E83FD3F64019");

                    b.HasIndex("TrackId");

                    b.HasIndex(new[] { "UserId", "TrackId" }, "idx_user_track_like")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Domain.Models.Listen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ListenedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("listened_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ListenerId")
                        .HasColumnType("int")
                        .HasColumnName("listener_id");

                    b.Property<int>("TrackId")
                        .HasColumnType("int")
                        .HasColumnName("track_id");

                    b.HasKey("Id")
                        .HasName("PK__Listens__3213E83F80DCE753");

                    b.HasIndex("ListenerId");

                    b.HasIndex("TrackId");

                    b.ToTable("Listens");
                });

            modelBuilder.Entity("Domain.Models.Listener", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Preferences")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("preferences");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Listener__3213E83FCA830C34");

                    b.ToTable("Listeners");
                });

            modelBuilder.Entity("Domain.Models.Musician", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DonationAccount")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("donation_account");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Musician__3213E83FE9CFF1B1");

                    b.ToTable("Musicians");
                });

            modelBuilder.Entity("Domain.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__Notifica__3213E83F7B32F9B0");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__Payments__3213E83F09C85D0E");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ListenerId")
                        .HasColumnType("int")
                        .HasColumnName("listener_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Playlist__3213E83F1683C018");

                    b.HasIndex("ListenerId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Domain.Models.PlaylistTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("added_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int")
                        .HasColumnName("playlist_id");

                    b.Property<int>("TrackId")
                        .HasColumnType("int")
                        .HasColumnName("track_id");

                    b.HasKey("Id")
                        .HasName("PK__Playlist__3213E83F1095E5D7");

                    b.HasIndex("TrackId");

                    b.HasIndex(new[] { "PlaylistId", "TrackId" }, "idx_playlist_track")
                        .IsUnique();

                    b.ToTable("Playlist_Tracks", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<int>("TrackId")
                        .HasColumnType("int")
                        .HasColumnName("track_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Promotio__3213E83F95D0FAD3");

                    b.HasIndex("TrackId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Domain.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Rating1")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int>("TrackId")
                        .HasColumnType("int")
                        .HasColumnName("track_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__Ratings__3213E83FAB47B0E3");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Domain.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expires_at");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("session_token");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__Sessions__3213E83F4A51A48F");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "SessionToken" }, "UQ__Sessions__E598F5C8192ECA75")
                        .IsUnique();

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Domain.Models.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("Donations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("donations");

                    b.Property<int?>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("likes");

                    b.Property<int?>("Listens")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("listens");

                    b.Property<int>("TrackId")
                        .HasColumnType("int")
                        .HasColumnName("track_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Statisti__3213E83FC1A94DD5");

                    b.HasIndex("TrackId");

                    b.ToTable("Statistic", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<int>("ListenerId")
                        .HasColumnType("int")
                        .HasColumnName("listener_id");

                    b.Property<int>("MusicianId")
                        .HasColumnType("int")
                        .HasColumnName("musician_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Subscrip__3213E83FB62C61AF");

                    b.HasIndex("ListenerId");

                    b.HasIndex("MusicianId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Domain.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlbumId")
                        .HasColumnType("int")
                        .HasColumnName("album_id");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("artist_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_path");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Tracks__3213E83F2918E1BB");

                    b.HasIndex("AlbumId");

                    b.HasIndex("GenreId");

                    b.HasIndex(new[] { "ArtistId" }, "idx_artist_id");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PK__Users__3213E83FCAB1C574");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E61642790C607")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__Users__F3DBC572F2049C10")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "idx_email");

                    b.HasIndex(new[] { "Username" }, "idx_username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Advertisement", b =>
                {
                    b.HasOne("Domain.Models.User", "Advertiser")
                        .WithMany("Advertisements")
                        .HasForeignKey("AdvertiserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Advertise__adver__797309D9");

                    b.Navigation("Advertiser");
                });

            modelBuilder.Entity("Domain.Models.Album", b =>
                {
                    b.HasOne("Domain.Models.Musician", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Albums__artist_i__4CA06362");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.HasOne("Domain.Models.Track", "Track")
                        .WithMany("Comments")
                        .HasForeignKey("TrackId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__track___6754599E");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Comments__user_i__66603565");

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Donation", b =>
                {
                    b.HasOne("Domain.Models.Listener", "Listener")
                        .WithMany("Donations")
                        .HasForeignKey("ListenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Donations__liste__5CD6CB2B");

                    b.HasOne("Domain.Models.Musician", "Musician")
                        .WithMany("Donations")
                        .HasForeignKey("MusicianId")
                        .IsRequired()
                        .HasConstraintName("FK__Donations__music__5DCAEF64");

                    b.Navigation("Listener");

                    b.Navigation("Musician");
                });

            modelBuilder.Entity("Domain.Models.Like", b =>
                {
                    b.HasOne("Domain.Models.Track", "Track")
                        .WithMany("Likes")
                        .HasForeignKey("TrackId")
                        .IsRequired()
                        .HasConstraintName("FK__Likes__track_id__6C190EBB");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Likes__user_id__6B24EA82");

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Listen", b =>
                {
                    b.HasOne("Domain.Models.Listener", "Listener")
                        .WithMany("Listens")
                        .HasForeignKey("ListenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Listens__listene__619B8048");

                    b.HasOne("Domain.Models.Track", "Track")
                        .WithMany("Listens")
                        .HasForeignKey("TrackId")
                        .IsRequired()
                        .HasConstraintName("FK__Listens__track_i__628FA481");

                    b.Navigation("Listener");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Domain.Models.Listener", b =>
                {
                    b.HasOne("Domain.Models.User", "IdNavigation")
                        .WithOne("Listener")
                        .HasForeignKey("Domain.Models.Listener", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Listeners__id__4316F928");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Domain.Models.Musician", b =>
                {
                    b.HasOne("Domain.Models.User", "IdNavigation")
                        .WithOne("Musician")
                        .HasForeignKey("Domain.Models.Musician", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Musicians__id__3E52440B");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Domain.Models.Notification", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__user___160F4887");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Payment", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Payments__user_i__7F2BE32F");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Playlist", b =>
                {
                    b.HasOne("Domain.Models.Listener", "Listener")
                        .WithMany("Playlists")
                        .HasForeignKey("ListenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Playlists__liste__6FE99F9F");

                    b.Navigation("Listener");
                });

            modelBuilder.Entity("Domain.Models.PlaylistTrack", b =>
                {
                    b.HasOne("Domain.Models.Playlist", "Playlist")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Playlist___playl__74AE54BC");

                    b.HasOne("Domain.Models.Track", "Track")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("TrackId")
                        .IsRequired()
                        .HasConstraintName("FK__Playlist___track__75A278F5");

                    b.Navigation("Playlist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Domain.Models.Promotion", b =>
                {
                    b.HasOne("Domain.Models.Track", "Track")
                        .WithMany("Promotions")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Promotion__track__5812160E");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Domain.Models.Rating", b =>
                {
                    b.HasOne("Domain.Models.Track", "Track")
                        .WithMany("Ratings")
                        .HasForeignKey("TrackId")
                        .IsRequired()
                        .HasConstraintName("FK__Ratings__track_i__1BC821DD");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Ratings__user_id__1AD3FDA4");

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Session", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Sessions__user_i__123EB7A3");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Statistic", b =>
                {
                    b.HasOne("Domain.Models.Track", "Track")
                        .WithMany("Statistics")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Statistic__track__09A971A2");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Domain.Models.Subscription", b =>
                {
                    b.HasOne("Domain.Models.Listener", "Listener")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ListenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Subscript__liste__03F0984C");

                    b.HasOne("Domain.Models.Musician", "Musician")
                        .WithMany("Subscriptions")
                        .HasForeignKey("MusicianId")
                        .IsRequired()
                        .HasConstraintName("FK__Subscript__music__04E4BC85");

                    b.Navigation("Listener");

                    b.Navigation("Musician");
                });

            modelBuilder.Entity("Domain.Models.Track", b =>
                {
                    b.HasOne("Domain.Models.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK__Tracks__album_id__52593CB8");

                    b.HasOne("Domain.Models.Musician", "Artist")
                        .WithMany("Tracks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Tracks__artist_i__5165187F");

                    b.HasOne("Domain.Models.Genre", "Genre")
                        .WithMany("Tracks")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK__Tracks__genre_id__534D60F1");

                    b.Navigation("Album");

                    b.Navigation("Artist");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Domain.Models.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Domain.Models.Genre", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Domain.Models.Listener", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("Listens");

                    b.Navigation("Playlists");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Domain.Models.Musician", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Donations");

                    b.Navigation("Subscriptions");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Domain.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistTracks");
                });

            modelBuilder.Entity("Domain.Models.Track", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Listens");

                    b.Navigation("PlaylistTracks");

                    b.Navigation("Promotions");

                    b.Navigation("Ratings");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Listener");

                    b.Navigation("Musician");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Ratings");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
